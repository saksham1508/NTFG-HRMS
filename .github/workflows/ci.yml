name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing and Linting
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install backend dependencies
      run: |
        cd server
        npm ci

    - name: Create test environment file
      run: |
        cd server
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=5001
        MONGODB_URI=mongodb://localhost:27017/ntfg_hrms_test
        JWT_SECRET=test_jwt_secret_key_for_ci
        OPENAI_API_KEY=test_openai_key
        CLOUDINARY_CLOUD_NAME=test_cloud
        CLOUDINARY_API_KEY=test_api_key
        CLOUDINARY_API_SECRET=test_api_secret
        EMAIL_USER=test@example.com
        EMAIL_PASS=test_password
        EOF

    - name: Run backend linting
      run: |
        cd server
        npm run lint || echo "Linting completed with warnings"

    - name: Run backend tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test

    - name: Generate backend test coverage
      run: |
        cd server
        npm run test:coverage || echo "Coverage generation completed"

  # Frontend Testing and Building
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd client
        npm ci

    - name: Run frontend linting
      run: |
        cd client
        npm run lint || echo "Linting completed with warnings"

    - name: Run frontend tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Build frontend
      run: |
        cd client
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: client/build/
        retention-days: 7

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        cd server
        docker build -t ntfg-hrms-backend:test .

    - name: Build frontend Docker image
      run: |
        cd client
        docker build -t ntfg-hrms-frontend:test .

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: echo "✅ All CI checks passed successfully!"
      
    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: echo "❌ Some CI checks failed. Please review the logs."