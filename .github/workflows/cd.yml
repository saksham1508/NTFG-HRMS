name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend Image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Frontend Image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Backend Image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Frontend Image: ${{ needs.build-and-push.outputs.frontend-image }}"
        
        # Here you would typically:
        # 1. SSH into your staging server
        # 2. Pull the new images
        # 3. Update docker-compose.yml with new image tags
        # 4. Run docker-compose up -d
        
        # Example deployment script (customize for your infrastructure):
        # ssh user@staging-server << 'EOF'
        # cd /path/to/your/app
        # docker-compose pull
        # docker-compose up -d
        # EOF

    - name: Run staging health checks
      run: |
        echo "🔍 Running health checks on staging..."
        # Add your health check commands here
        # curl -f http://staging-server/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Backend Image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Frontend Image: ${{ needs.build-and-push.outputs.frontend-image }}"
        
        # Production deployment script (customize for your infrastructure):
        # ssh user@production-server << 'EOF'
        # cd /path/to/your/app
        # docker-compose pull
        # docker-compose up -d
        # EOF

    - name: Run production health checks
      run: |
        echo "🔍 Running health checks on production..."
        # Add your production health check commands here
        # curl -f http://production-server/health || exit 1

    - name: Create deployment record
      run: |
        echo "📝 Recording deployment..."
        echo "Deployed version: ${{ github.ref_name }}"
        echo "Deployment time: $(date)"

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    
    steps:
    - name: Rollback deployment
      run: |
        echo "🔄 Rolling back deployment..."
        # Add rollback logic here
        # ssh user@production-server << 'EOF'
        # cd /path/to/your/app
        # docker-compose down
        # git checkout previous-stable-tag
        # docker-compose up -d
        # EOF

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.IMAGE_NAME }}-backend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true

    - name: Delete old frontend images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.IMAGE_NAME }}-frontend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true